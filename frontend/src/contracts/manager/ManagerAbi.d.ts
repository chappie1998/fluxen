/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.35.0
  Forc version: 0.35.3
  Fuel-Core version: 0.17.3
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum } from "./common";

export type AccessErrorInput = Enum<{ NFTAlreadyListed: [], NFTNotListed: [], SenderCannotSetAccessControl: [], SenderNotAdmin: [], SenderNotOwner: [], MaximumTimeNftLanded: [], CantLandNft: [], ContractIsNotWhitelisted: [], ContractIsAlreadyWhitelisted: [] }>;
export type AccessErrorOutput = AccessErrorInput;
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export type InitErrorInput = Enum<{ AdminIsNone: [] }>;
export type InitErrorOutput = InitErrorInput;
export type InputErrorInput = Enum<{ PriceCantBeZero: [], IncorrectAmountProvided: [], EndBlockIsLessThanStartBlock: [], WrongStartBlockProvided: [] }>;
export type InputErrorOutput = InputErrorInput;

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type AdminChangedEventInput = { mew_admin: IdentityInput };
export type AdminChangedEventOutput = { mew_admin: IdentityOutput };
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type LendNftInput = { start_block: BigNumberish, end_block: BigNumberish, price: BigNumberish, buyer: IdentityInput };
export type LendNftOutput = { start_block: BN, end_block: BN, price: BN, buyer: IdentityOutput };
export type LendNftEventInput = { contract_id: ContractIdInput, token_id: BigNumberish, buyer: IdentityInput, start_block: BigNumberish, end_block: BigNumberish, price: BigNumberish };
export type LendNftEventOutput = { contract_id: ContractIdOutput, token_id: BN, buyer: IdentityOutput, start_block: BN, end_block: BN, price: BN };
export type ListNftInput = { owner: IdentityInput, price: BigNumberish };
export type ListNftOutput = { owner: IdentityOutput, price: BN };
export type ManagerChangeEventInput = { mew_manager: IdentityInput };
export type ManagerChangeEventOutput = { mew_manager: IdentityOutput };
export type NFTDeListedEventInput = { owner: IdentityInput, nft_contract: ContractIdInput, token_id: BigNumberish };
export type NFTDeListedEventOutput = { owner: IdentityOutput, nft_contract: ContractIdOutput, token_id: BN };
export type NFTListedEventInput = { owner: IdentityInput, nft_contract: ContractIdInput, token_id: BigNumberish, price: BigNumberish };
export type NFTListedEventOutput = { owner: IdentityOutput, nft_contract: ContractIdOutput, token_id: BN, price: BN };
export type NFTPriceChangeEventInput = { owner: IdentityInput, nft_contract: ContractIdInput, token_id: BigNumberish, old_price: BigNumberish, new_price: BigNumberish };
export type NFTPriceChangeEventOutput = { owner: IdentityOutput, nft_contract: ContractIdOutput, token_id: BN, old_price: BN, new_price: BN };
export type UnwhiteListContractInput = { contract_id: ContractIdInput };
export type UnwhiteListContractOutput = { contract_id: ContractIdOutput };
export type WhiteListContractInput = { contract_id: ContractIdInput };
export type WhiteListContractOutput = { contract_id: ContractIdOutput };
export type WithdrawLanedNftEventInput = { contract_id: ContractIdInput, token_id: BigNumberish, buyer: IdentityInput, start_block: BigNumberish, end_block: BigNumberish };
export type WithdrawLanedNftEventOutput = { contract_id: ContractIdOutput, token_id: BN, buyer: IdentityOutput, start_block: BN, end_block: BN };

interface ManagerAbiInterface extends Interface {
  functions: {
    admin: FunctionFragment;
    change_nft_price: FunctionFragment;
    constructor: FunctionFragment;
    delist_nft: FunctionFragment;
    get_balance: FunctionFragment;
    get_default_protocol_feee: FunctionFragment;
    get_nft_data: FunctionFragment;
    get_protocol_fee: FunctionFragment;
    get_whiltested_contract: FunctionFragment;
    lend_nft: FunctionFragment;
    lended_nft_info: FunctionFragment;
    lended_nft_withdraw: FunctionFragment;
    list_nft: FunctionFragment;
    set_admin: FunctionFragment;
    set_manager: FunctionFragment;
    set_protocol_fee: FunctionFragment;
    unwhiltest_contract: FunctionFragment;
    whiltest_contract: FunctionFragment;
    withdraw_balance: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'admin', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'change_nft_price', values: [ContractIdInput, BigNumberish, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'constructor', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'delist_nft', values: [ContractIdInput, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_balance', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'get_default_protocol_feee', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'get_nft_data', values: [ContractIdInput, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_protocol_fee', values: [ContractIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_whiltested_contract', values: [ContractIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'lend_nft', values: [ContractIdInput, BigNumberish, IdentityInput, BigNumberish, BigNumberish, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'lended_nft_info', values: [ContractIdInput, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'lended_nft_withdraw', values: [ContractIdInput, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'list_nft', values: [ContractIdInput, BigNumberish, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'set_admin', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'set_manager', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'set_protocol_fee', values: [ContractIdInput, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'unwhiltest_contract', values: [ContractIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'whiltest_contract', values: [ContractIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'withdraw_balance', values: [BigNumberish]): Uint8Array;

  decodeFunctionData(functionFragment: 'admin', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'change_nft_price', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'constructor', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'delist_nft', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_balance', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_default_protocol_feee', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_nft_data', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_protocol_fee', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_whiltested_contract', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'lend_nft', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'lended_nft_info', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'lended_nft_withdraw', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'list_nft', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'set_admin', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'set_manager', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'set_protocol_fee', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'unwhiltest_contract', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'whiltest_contract', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'withdraw_balance', data: BytesLike): DecodedValue;
}

export class ManagerAbi extends Contract {
  interface: ManagerAbiInterface;
  functions: {
    admin: InvokeFunction<[], Option<IdentityOutput>>;
    change_nft_price: InvokeFunction<[id: ContractIdInput, token_id: BigNumberish, price: BigNumberish], void>;
    constructor: InvokeFunction<[admin: IdentityInput], void>;
    delist_nft: InvokeFunction<[id: ContractIdInput, token_id: BigNumberish], void>;
    get_balance: InvokeFunction<[], BN>;
    get_default_protocol_feee: InvokeFunction<[], BN>;
    get_nft_data: InvokeFunction<[id: ContractIdInput, token_id: BigNumberish], Option<ListNftOutput>>;
    get_protocol_fee: InvokeFunction<[id: ContractIdInput], BN>;
    get_whiltested_contract: InvokeFunction<[id: ContractIdInput], boolean>;
    lend_nft: InvokeFunction<[id: ContractIdInput, token_id: BigNumberish, buyer: IdentityInput, start_block: BigNumberish, end_block: BigNumberish, price: BigNumberish], void>;
    lended_nft_info: InvokeFunction<[id: ContractIdInput, token_id: BigNumberish], [Option<LendNftOutput>, Option<LendNftOutput>, Option<LendNftOutput>, Option<LendNftOutput>, Option<LendNftOutput>]>;
    lended_nft_withdraw: InvokeFunction<[id: ContractIdInput, token_id: BigNumberish], void>;
    list_nft: InvokeFunction<[id: ContractIdInput, token_id: BigNumberish, price: BigNumberish], void>;
    set_admin: InvokeFunction<[admin: IdentityInput], void>;
    set_manager: InvokeFunction<[manager: IdentityInput], void>;
    set_protocol_fee: InvokeFunction<[id: ContractIdInput, amount: BigNumberish], void>;
    unwhiltest_contract: InvokeFunction<[id: ContractIdInput], void>;
    whiltest_contract: InvokeFunction<[id: ContractIdInput], void>;
    withdraw_balance: InvokeFunction<[amount: BigNumberish], void>;
  };
}
