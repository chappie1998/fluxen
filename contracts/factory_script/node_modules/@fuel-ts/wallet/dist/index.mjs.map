{"version":3,"sources":["../src/base-locked-wallet.ts","../src/constants.ts","../src/base-unlocked-wallet.ts","../src/wallets.ts","../src/wallet.ts"],"sourcesContent":["import type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify, hexlify } from '@ethersproject/bytes';\nimport type { InputValue } from '@fuel-ts/abi-coder';\nimport { Address, addressify } from '@fuel-ts/address';\nimport { NativeAssetId } from '@fuel-ts/constants';\nimport { AbstractWallet } from '@fuel-ts/interfaces';\nimport type { AbstractAddress, AbstractPredicate } from '@fuel-ts/interfaces';\nimport type { BigNumberish, BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type {\n  TransactionResponse,\n  TransactionRequestLike,\n  CallResult,\n  TransactionRequest,\n  Coin,\n  CoinQuantityLike,\n  CoinQuantity,\n  BuildPredicateOptions,\n  TransactionResult,\n  Message,\n  Resource,\n  ExcludeResourcesOption,\n} from '@fuel-ts/providers';\nimport {\n  withdrawScript,\n  ScriptTransactionRequest,\n  Provider,\n  transactionRequestify,\n} from '@fuel-ts/providers';\nimport { MAX_GAS_PER_TX } from '@fuel-ts/transactions';\n\nimport { FUEL_NETWORK_URL } from './constants';\n\n/**\n * BaseWallet\n */\nexport class BaseWalletLocked extends AbstractWallet {\n  private readonly _address: AbstractAddress;\n\n  provider: Provider;\n\n  constructor(publicKey: string | AbstractAddress, provider: string | Provider = FUEL_NETWORK_URL) {\n    super();\n    this.provider = this.connect(provider);\n    if (typeof publicKey === 'string') {\n      this._address = Address.fromString(publicKey);\n    } else {\n      this._address = addressify(publicKey);\n    }\n  }\n\n  get address(): AbstractAddress {\n    return this._address;\n  }\n\n  /**\n   * Change provider connection\n   */\n  connect(provider: string | Provider) {\n    if (!provider) {\n      throw new Error('Provider is required');\n    } else if (typeof provider === 'string') {\n      if (this.provider) {\n        this.provider.connect(provider);\n      } else {\n        this.provider = new Provider(provider);\n      }\n    } else {\n      this.provider = provider;\n    }\n    return this.provider;\n  }\n\n  /**\n   * Returns resources satisfying the spend query.\n   */\n  async getResourcesToSpend(\n    quantities: CoinQuantityLike[] /** IDs of coins to exclude */,\n    excludedIds?: ExcludeResourcesOption\n  ): Promise<Resource[]> {\n    return this.provider.getResourcesToSpend(this.address, quantities, excludedIds);\n  }\n\n  /**\n   * Gets coins owned by the wallet address.\n   */\n  async getCoins(assetId?: BytesLike): Promise<Coin[]> {\n    const coins = [];\n\n    const pageSize = 9999;\n    let cursor;\n    // eslint-disable-next-line no-unreachable-loop\n    for (;;) {\n      const pageCoins = await this.provider.getCoins(this.address, assetId, {\n        first: pageSize,\n        after: cursor,\n      });\n\n      coins.push(...pageCoins);\n\n      const hasNextPage = pageCoins.length >= pageSize;\n      if (!hasNextPage) {\n        break;\n      }\n\n      // TODO: implement pagination\n      throw new Error(`Wallets with more than ${pageSize} coins are not yet supported`);\n    }\n\n    return coins;\n  }\n\n  /**\n   * Gets messages owned by the wallet address.\n   */\n  async getMessages(): Promise<Message[]> {\n    const messages = [];\n\n    const pageSize = 9999;\n    let cursor;\n    // eslint-disable-next-line no-unreachable-loop\n    for (;;) {\n      const pageMessages = await this.provider.getMessages(this.address, {\n        first: pageSize,\n        after: cursor,\n      });\n\n      messages.push(...pageMessages);\n\n      const hasNextPage = pageMessages.length >= pageSize;\n      if (!hasNextPage) {\n        break;\n      }\n\n      // TODO: implement pagination\n      throw new Error(`Wallets with more than ${pageSize} messages are not yet supported`);\n    }\n\n    return messages;\n  }\n\n  /**\n   * Gets balance for the given asset.\n   */\n  async getBalance(assetId: BytesLike = NativeAssetId): Promise<BN> {\n    const amount = await this.provider.getBalance(this.address, assetId);\n    return amount;\n  }\n\n  /**\n   * Gets balances.\n   */\n  async getBalances(): Promise<CoinQuantity[]> {\n    const balances = [];\n\n    const pageSize = 9999;\n    let cursor;\n    // eslint-disable-next-line no-unreachable-loop\n    for (;;) {\n      const pageBalances = await this.provider.getBalances(this.address, {\n        first: pageSize,\n        after: cursor,\n      });\n\n      balances.push(...pageBalances);\n\n      const hasNextPage = pageBalances.length >= pageSize;\n      if (!hasNextPage) {\n        break;\n      }\n\n      // TODO: implement pagination\n      throw new Error(`Wallets with more than ${pageSize} balances are not yet supported`);\n    }\n\n    return balances;\n  }\n\n  /**\n   * Adds resources to the transaction enough to fund it.\n   */\n  async fund<T extends TransactionRequest>(request: T): Promise<void> {\n    const fee = request.calculateFee();\n    const resources = await this.getResourcesToSpend([fee]);\n\n    request.addResources(resources);\n  }\n\n  /**\n   * Returns coins satisfying the spend query.\n   */\n  async transfer(\n    /** Address of the destination */\n    destination: AbstractAddress,\n    /** Amount of coins */\n    amount: BigNumberish,\n    /** Asset ID of coins */\n    assetId: BytesLike = NativeAssetId,\n    /** Tx Params */\n    txParams: Pick<TransactionRequestLike, 'gasLimit' | 'gasPrice' | 'maturity'> = {}\n  ): Promise<TransactionResponse> {\n    const params = { gasLimit: MAX_GAS_PER_TX, ...txParams };\n    const request = new ScriptTransactionRequest(params);\n    request.addCoinOutput(destination, amount, assetId);\n    const fee = request.calculateFee();\n    let quantities: CoinQuantityLike[] = [];\n\n    if (fee.assetId === hexlify(assetId)) {\n      fee.amount = fee.amount.add(amount);\n      quantities = [fee];\n    } else {\n      quantities = [[amount, assetId], fee];\n    }\n\n    const resources = await this.getResourcesToSpend(quantities);\n    request.addResources(resources);\n\n    return this.sendTransaction(request);\n  }\n\n  /**\n   * Withdraws an amount of the base asset to the base chain.\n   */\n  async withdrawToBaseLayer(\n    /** Address of the recipient on the base chain */\n    recipient: AbstractAddress,\n    /** Amount of base asset */\n    amount: BigNumberish,\n    /** Tx Params */\n    txParams: Pick<TransactionRequestLike, 'gasLimit' | 'gasPrice' | 'maturity'> = {}\n  ): Promise<TransactionResponse> {\n    // add recipient and amount to the transaction script code\n    const recipientDataArray = arrayify(\n      '0x'.concat(recipient.toHexString().substring(2).padStart(64, '0'))\n    );\n    const amountDataArray = arrayify(\n      '0x'.concat(bn(amount).toHex().substring(2).padStart(16, '0'))\n    );\n    const script = new Uint8Array([\n      ...arrayify(withdrawScript.bytes),\n      ...recipientDataArray,\n      ...amountDataArray,\n    ]);\n\n    // build the transaction\n    const params = { script, gasLimit: MAX_GAS_PER_TX, ...txParams };\n    const request = new ScriptTransactionRequest(params);\n    request.addMessageOutputs();\n    const fee = request.calculateFee();\n    let quantities: CoinQuantityLike[] = [];\n    fee.amount = fee.amount.add(amount);\n    quantities = [fee];\n    const resources = await this.getResourcesToSpend(quantities);\n    request.addResources(resources);\n\n    return this.sendTransaction(request);\n  }\n\n  /**\n   * Populates witnesses signature and send it to the network using `provider.sendTransaction`.\n   *\n   * @param transactionRequest - TransactionRequest\n   * @returns TransactionResponse\n   */\n  async sendTransaction(\n    transactionRequestLike: TransactionRequestLike\n  ): Promise<TransactionResponse> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    await this.provider.addMissingVariables(transactionRequest);\n    return this.provider.sendTransaction(transactionRequest);\n  }\n\n  /**\n   * Populates witnesses signature and send a call it to the network using `provider.call`.\n   *\n   * @param transactionRequest - TransactionRequest\n   * @returns CallResult\n   */\n  async simulateTransaction(transactionRequestLike: TransactionRequestLike): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    await this.provider.addMissingVariables(transactionRequest);\n    return this.provider.simulate(transactionRequest);\n  }\n\n  async buildPredicateTransaction(\n    predicateAddress: AbstractAddress,\n    amountToPredicate: BigNumberish,\n    assetId: BytesLike = NativeAssetId,\n    predicateOptions?: BuildPredicateOptions\n  ): Promise<ScriptTransactionRequest> {\n    const options = {\n      fundTransaction: true,\n      ...predicateOptions,\n    };\n    const request = new ScriptTransactionRequest({\n      gasLimit: MAX_GAS_PER_TX,\n      ...options,\n    });\n\n    // output is locked behind predicate\n    request.addCoinOutput(predicateAddress, amountToPredicate, assetId);\n\n    const requiredCoinQuantities: CoinQuantityLike[] = [];\n    if (options.fundTransaction) {\n      requiredCoinQuantities.push(request.calculateFee());\n    }\n\n    if (requiredCoinQuantities.length) {\n      const resources = await this.getResourcesToSpend(requiredCoinQuantities);\n      request.addResources(resources);\n    }\n\n    return request;\n  }\n\n  async submitPredicate(\n    predicateAddress: AbstractAddress,\n    amountToPredicate: BigNumberish,\n    assetId: BytesLike = NativeAssetId,\n    options?: BuildPredicateOptions\n  ): Promise<TransactionResult<'success'>> {\n    const request = await this.buildPredicateTransaction(\n      predicateAddress,\n      amountToPredicate,\n      assetId,\n      options\n    );\n    const response = await this.sendTransaction(request);\n    return response.waitForResult();\n  }\n\n  async submitSpendPredicate(\n    predicate: AbstractPredicate,\n    amountToSpend: BigNumberish,\n    predicateData?: InputValue[],\n    assetId: BytesLike = NativeAssetId,\n    options?: BuildPredicateOptions\n  ): Promise<TransactionResult<'success'>> {\n    return this.provider.submitSpendPredicate(\n      predicate,\n      amountToSpend,\n      this.address,\n      predicateData,\n      assetId,\n      options\n    );\n  }\n}\n","// TODO: import using .env file\nexport const FUEL_NETWORK_URL = 'http://127.0.0.1:4000/graphql';\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { hashMessage, hashTransaction } from '@fuel-ts/hasher';\nimport type {\n  TransactionResponse,\n  TransactionRequestLike,\n  CallResult,\n  Provider,\n} from '@fuel-ts/providers';\nimport { transactionRequestify } from '@fuel-ts/providers';\nimport { Signer } from '@fuel-ts/signer';\n\nimport { BaseWalletLocked } from './base-locked-wallet';\nimport { FUEL_NETWORK_URL } from './constants';\n\n/**\n * BaseWalletUnlocked\n */\nexport class BaseWalletUnlocked extends BaseWalletLocked {\n  /* default HDWallet path */\n  static defaultPath = \"m/44'/1179993420'/0'/0/0\";\n\n  provider: Provider;\n\n  signer: () => Signer;\n\n  constructor(privateKey: BytesLike, provider: string | Provider = FUEL_NETWORK_URL) {\n    const signer = new Signer(privateKey);\n    super(signer.address, provider);\n    this.signer = () => signer;\n    this.provider = this.connect(provider);\n  }\n\n  get privateKey(): string {\n    return this.signer().privateKey;\n  }\n\n  get publicKey(): string {\n    return this.signer().publicKey;\n  }\n\n  /**\n   * Sign message with wallet instance privateKey\n   *\n   * @param message - Message\n   * @returns Promise<string> - Signature a ECDSA 64 bytes\n   */\n  async signMessage(message: string): Promise<string> {\n    return this.signer().sign(hashMessage(message));\n  }\n\n  /**\n   * Sign transaction with wallet instance privateKey\n   *\n   * @param transactionRequestLike - TransactionRequestLike\n   * @returns string - Signature a ECDSA 64 bytes\n   */\n  async signTransaction(transactionRequestLike: TransactionRequestLike): Promise<string> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    const hashedTransaction = hashTransaction(transactionRequest);\n    const signature = this.signer().sign(hashedTransaction);\n\n    return signature;\n  }\n\n  async populateTransactionWitnessesSignature(transactionRequestLike: TransactionRequestLike) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    const signedTransaction = await this.signTransaction(transactionRequest);\n\n    transactionRequest.updateWitnessByOwner(this.address, signedTransaction);\n\n    return transactionRequest;\n  }\n\n  /**\n   * Populates witnesses signature and send it to the network using `provider.sendTransaction`.\n   *\n   * @param transactionRequest - TransactionRequest\n   * @returns TransactionResponse\n   */\n  async sendTransaction(\n    transactionRequestLike: TransactionRequestLike\n  ): Promise<TransactionResponse> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    await this.provider.addMissingVariables(transactionRequest);\n    return this.provider.sendTransaction(\n      await this.populateTransactionWitnessesSignature(transactionRequest)\n    );\n  }\n\n  /**\n   * Populates witnesses signature and send a call it to the network using `provider.call`.\n   *\n   * @param transactionRequest - TransactionRequest\n   * @returns CallResult\n   */\n  async simulateTransaction(transactionRequestLike: TransactionRequestLike): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    await this.provider.addMissingVariables(transactionRequest);\n    return this.provider.call(\n      await this.populateTransactionWitnessesSignature(transactionRequest),\n      {\n        utxoValidation: true,\n      }\n    );\n  }\n}\n","//\n// Because WalletLocked and WalletUnlocked has a cycle dependency\n// it's not possible to split the two classes in different files\n//\n/* eslint-disable max-classes-per-file */\nimport type { BytesLike } from '@ethersproject/bytes';\nimport { HDWallet } from '@fuel-ts/hdwallet';\nimport { Mnemonic } from '@fuel-ts/mnemonic';\nimport type { Provider } from '@fuel-ts/providers';\nimport { Signer } from '@fuel-ts/signer';\n\nimport { BaseWalletLocked } from './base-locked-wallet';\nimport { BaseWalletUnlocked } from './base-unlocked-wallet';\nimport type { GenerateOptions } from './types/GenerateOptions';\n\n/**\n * WalletLocked\n */\nexport class WalletLocked extends BaseWalletLocked {\n  unlock(privateKey: BytesLike) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return new WalletUnlocked(privateKey, this.provider);\n  }\n}\n\n/**\n * WalletUnlocked\n */\nexport class WalletUnlocked extends BaseWalletUnlocked {\n  lock(): WalletLocked {\n    this.signer = () => new Signer('0x00');\n    return new WalletLocked(this.address, this.provider);\n  }\n\n  /**\n   * Generate a new Wallet Unlocked with a random keyPair\n   *\n   * @param options - GenerateOptions\n   * @returns wallet - Wallet instance\n   */\n  static generate(generateOptions?: GenerateOptions): WalletUnlocked {\n    const privateKey = Signer.generatePrivateKey(generateOptions?.entropy);\n\n    return new WalletUnlocked(privateKey, generateOptions?.provider);\n  }\n\n  /**\n   * Create Wallet Unlocked from a seed\n   */\n  static fromSeed(seed: string, path?: string, provider?: Provider): WalletUnlocked {\n    const hdWallet = HDWallet.fromSeed(seed);\n    const childWallet = hdWallet.derivePath(path || WalletUnlocked.defaultPath);\n\n    return new WalletUnlocked(<string>childWallet.privateKey, provider);\n  }\n\n  /**\n   * Create Wallet Unlocked from mnemonic phrase\n   */\n  static fromMnemonic(\n    mnemonic: string,\n    path?: string,\n    passphrase?: BytesLike,\n    provider?: Provider\n  ): WalletUnlocked {\n    const seed = Mnemonic.mnemonicToSeed(mnemonic, passphrase);\n    const hdWallet = HDWallet.fromSeed(seed);\n    const childWallet = hdWallet.derivePath(path || WalletUnlocked.defaultPath);\n\n    return new WalletUnlocked(<string>childWallet.privateKey, provider);\n  }\n\n  /**\n   * Create Wallet Unlocked from extended key\n   */\n  static fromExtendedKey(extendedKey: string, provider?: Provider): WalletUnlocked {\n    const hdWallet = HDWallet.fromExtendedKey(extendedKey);\n\n    return new WalletUnlocked(<string>hdWallet.privateKey, provider);\n  }\n}\n","import type { BytesLike } from '@ethersproject/bytes';\nimport type { AbstractAddress } from '@fuel-ts/interfaces';\nimport type { Provider } from '@fuel-ts/providers';\n\nimport { FUEL_NETWORK_URL } from './constants';\nimport { WalletLocked, WalletUnlocked } from './wallets';\n\nexport class Wallet {\n  static fromAddress(\n    address: string | AbstractAddress,\n    provider: string | Provider = FUEL_NETWORK_URL\n  ): WalletLocked {\n    return new WalletLocked(address, provider);\n  }\n\n  static fromPrivateKey(privateKey: BytesLike, provider: string | Provider = FUEL_NETWORK_URL) {\n    return new WalletUnlocked(privateKey, provider);\n  }\n\n  static generate = WalletUnlocked.generate;\n  static fromSeed = WalletUnlocked.fromSeed;\n  static fromMnemonic = WalletUnlocked.fromMnemonic;\n  static fromExtendedKey = WalletUnlocked.fromExtendedKey;\n}\n"],"mappings":"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","names":["arrayify","hexlify","Address","addressify","NativeAssetId","AbstractWallet","bn","withdrawScript","ScriptTransactionRequest","Provider","transactionRequestify","MAX_GAS_PER_TX","FUEL_NETWORK_URL","BaseWalletLocked","AbstractWallet","publicKey","provider","FUEL_NETWORK_URL","Address","addressify","Provider","quantities","excludedIds","assetId","coins","cursor","pageCoins","messages","pageMessages","NativeAssetId","balances","pageBalances","request","fee","resources","destination","amount","txParams","params","MAX_GAS_PER_TX","ScriptTransactionRequest","hexlify","recipient","recipientDataArray","arrayify","amountDataArray","bn","withdrawScript","transactionRequestLike","transactionRequest","transactionRequestify","predicateAddress","amountToPredicate","predicateOptions","options","requiredCoinQuantities","predicate","amountToSpend","predicateData","hashMessage","hashTransaction","transactionRequestify","Signer","BaseWalletUnlocked","BaseWalletLocked","privateKey","provider","FUEL_NETWORK_URL","signer","Signer","message","hashMessage","transactionRequestLike","transactionRequest","transactionRequestify","hashedTransaction","hashTransaction","signedTransaction","HDWallet","Mnemonic","Signer","WalletLocked","BaseWalletLocked","privateKey","WalletUnlocked","BaseWalletUnlocked","Signer","generateOptions","seed","path","provider","childWallet","HDWallet","mnemonic","passphrase","Mnemonic","extendedKey","hdWallet","Wallet","address","provider","FUEL_NETWORK_URL","WalletLocked","privateKey","WalletUnlocked"]}