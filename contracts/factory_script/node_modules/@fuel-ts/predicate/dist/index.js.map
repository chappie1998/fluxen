{"version":3,"sources":["../src/index.ts","../src/predicate.ts"],"sourcesContent":["export * from './predicate';\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify } from '@ethersproject/bytes';\nimport { Logger } from '@ethersproject/logger';\nimport { Interface } from '@fuel-ts/abi-coder';\nimport type { JsonAbiFragmentType, JsonAbi } from '@fuel-ts/abi-coder';\nimport { Address } from '@fuel-ts/address';\nimport { ContractUtils } from '@fuel-ts/contract';\nimport { AbstractPredicate } from '@fuel-ts/interfaces';\nimport type { AbstractAddress } from '@fuel-ts/interfaces';\nimport { versions } from '@fuel-ts/versions';\n\nconst logger = new Logger(versions.FUELS);\n\nexport class Predicate extends AbstractPredicate {\n  bytes: Uint8Array;\n  address: AbstractAddress;\n  types?: ReadonlyArray<JsonAbiFragmentType>;\n  interface?: Interface;\n\n  constructor(bytes: BytesLike, types?: JsonAbi) {\n    super();\n    this.bytes = arrayify(bytes);\n    this.address = Address.fromB256(ContractUtils.getContractRoot(this.bytes));\n\n    if (types) {\n      this.interface = new Interface(types as JsonAbi);\n      const mainFunction = this.interface.fragments.find(({ name }) => name === 'main');\n      if (mainFunction !== undefined) {\n        this.types = mainFunction.inputs;\n      } else {\n        logger.throwArgumentError(\n          'Cannot use ABI without \"main\" function',\n          'Function fragments',\n          this.interface.fragments\n        );\n      }\n    }\n  }\n}\n"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,eAAAE,IAAA,eAAAC,EAAAH,GCCA,IAAAI,EAAyB,gCACzBC,EAAuB,iCACvBC,EAA0B,8BAE1BC,EAAwB,4BACxBC,EAA8B,6BAC9BC,EAAkC,+BAElCC,EAAyB,6BAEnBC,EAAS,IAAI,SAAO,WAAS,KAAK,EAE3BC,EAAN,cAAwB,mBAAkB,CAM/C,YAAYC,EAAkBC,EAAiB,CAC7C,MAAM,EACN,QAAK,SAAQ,YAASD,CAAK,EAC3B,KAAK,QAAU,UAAQ,SAAS,gBAAc,gBAAgB,KAAK,KAAK,CAAC,EAErEC,EAAO,CACT,KAAK,UAAY,IAAI,YAAUA,CAAgB,EAC/C,IAAMC,EAAe,KAAK,UAAU,UAAU,KAAK,CAAC,CAAE,KAAAC,CAAK,IAAMA,IAAS,MAAM,EAC5ED,IAAiB,OACnB,KAAK,MAAQA,EAAa,OAE1BJ,EAAO,mBACL,yCACA,qBACA,KAAK,UAAU,SACjB,CAEJ,CACF,CACF","names":["src_exports","__export","Predicate","__toCommonJS","import_bytes","import_logger","import_abi_coder","import_address","import_contract","import_interfaces","import_versions","logger","Predicate","bytes","types","mainFunction","name"]}