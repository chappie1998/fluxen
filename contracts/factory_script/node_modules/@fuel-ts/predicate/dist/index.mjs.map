{"version":3,"sources":["../src/predicate.ts"],"sourcesContent":["import type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify } from '@ethersproject/bytes';\nimport { Logger } from '@ethersproject/logger';\nimport { Interface } from '@fuel-ts/abi-coder';\nimport type { JsonAbiFragmentType, JsonAbi } from '@fuel-ts/abi-coder';\nimport { Address } from '@fuel-ts/address';\nimport { ContractUtils } from '@fuel-ts/contract';\nimport { AbstractPredicate } from '@fuel-ts/interfaces';\nimport type { AbstractAddress } from '@fuel-ts/interfaces';\nimport { versions } from '@fuel-ts/versions';\n\nconst logger = new Logger(versions.FUELS);\n\nexport class Predicate extends AbstractPredicate {\n  bytes: Uint8Array;\n  address: AbstractAddress;\n  types?: ReadonlyArray<JsonAbiFragmentType>;\n  interface?: Interface;\n\n  constructor(bytes: BytesLike, types?: JsonAbi) {\n    super();\n    this.bytes = arrayify(bytes);\n    this.address = Address.fromB256(ContractUtils.getContractRoot(this.bytes));\n\n    if (types) {\n      this.interface = new Interface(types as JsonAbi);\n      const mainFunction = this.interface.fragments.find(({ name }) => name === 'main');\n      if (mainFunction !== undefined) {\n        this.types = mainFunction.inputs;\n      } else {\n        logger.throwArgumentError(\n          'Cannot use ABI without \"main\" function',\n          'Function fragments',\n          this.interface.fragments\n        );\n      }\n    }\n  }\n}\n"],"mappings":"AACA,OAAS,YAAAA,MAAgB,uBACzB,OAAS,UAAAC,MAAc,wBACvB,OAAS,aAAAC,MAAiB,qBAE1B,OAAS,WAAAC,MAAe,mBACxB,OAAS,iBAAAC,MAAqB,oBAC9B,OAAS,qBAAAC,MAAyB,sBAElC,OAAS,YAAAC,MAAgB,oBAEzB,IAAMC,EAAS,IAAIN,EAAOK,EAAS,KAAK,EAE3BE,EAAN,cAAwBH,CAAkB,CAM/C,YAAYI,EAAkBC,EAAiB,CAC7C,MAAM,EACN,QAAK,MAAQV,EAASS,CAAK,EAC3B,KAAK,QAAUN,EAAQ,SAASC,EAAc,gBAAgB,KAAK,KAAK,CAAC,EAErEM,EAAO,CACT,KAAK,UAAY,IAAIR,EAAUQ,CAAgB,EAC/C,IAAMC,EAAe,KAAK,UAAU,UAAU,KAAK,CAAC,CAAE,KAAAC,CAAK,IAAMA,IAAS,MAAM,EAC5ED,IAAiB,OACnB,KAAK,MAAQA,EAAa,OAE1BJ,EAAO,mBACL,yCACA,qBACA,KAAK,UAAU,SACjB,CAEJ,CACF,CACF","names":["arrayify","Logger","Interface","Address","ContractUtils","AbstractPredicate","versions","logger","Predicate","bytes","types","mainFunction","name"]}